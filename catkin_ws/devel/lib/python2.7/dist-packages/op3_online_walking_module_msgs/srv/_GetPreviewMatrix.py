# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_online_walking_module_msgs/GetPreviewMatrixRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import op3_online_walking_module_msgs.msg

class GetPreviewMatrixRequest(genpy.Message):
  _md5sum = "c53f64dcb60fc3295f4cc978d9f67b37"
  _type = "op3_online_walking_module_msgs/GetPreviewMatrixRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """op3_online_walking_module_msgs/PreviewRequest req

================================================================================
MSG: op3_online_walking_module_msgs/PreviewRequest
float64 control_cycle
float64 lipm_height
"""
  __slots__ = ['req']
  _slot_types = ['op3_online_walking_module_msgs/PreviewRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       req

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPreviewMatrixRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.req is None:
        self.req = op3_online_walking_module_msgs.msg.PreviewRequest()
    else:
      self.req = op3_online_walking_module_msgs.msg.PreviewRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.req.control_cycle, _x.req.lipm_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.req is None:
        self.req = op3_online_walking_module_msgs.msg.PreviewRequest()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.req.control_cycle, _x.req.lipm_height,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.req.control_cycle, _x.req.lipm_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.req is None:
        self.req = op3_online_walking_module_msgs.msg.PreviewRequest()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.req.control_cycle, _x.req.lipm_height,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_online_walking_module_msgs/GetPreviewMatrixResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import op3_online_walking_module_msgs.msg

class GetPreviewMatrixResponse(genpy.Message):
  _md5sum = "7d75f439dc091946b1653b9d97860045"
  _type = "op3_online_walking_module_msgs/GetPreviewMatrixResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """op3_online_walking_module_msgs/PreviewResponse res


================================================================================
MSG: op3_online_walking_module_msgs/PreviewResponse
int32 K_row
int32 K_col
float64[] K
int32 P_row
int32 P_col
float64[] P
"""
  __slots__ = ['res']
  _slot_types = ['op3_online_walking_module_msgs/PreviewResponse']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       res

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPreviewMatrixResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.res is None:
        self.res = op3_online_walking_module_msgs.msg.PreviewResponse()
    else:
      self.res = op3_online_walking_module_msgs.msg.PreviewResponse()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.res.K_row, _x.res.K_col))
      length = len(self.res.K)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.res.K))
      _x = self
      buff.write(_get_struct_2i().pack(_x.res.P_row, _x.res.P_col))
      length = len(self.res.P)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.res.P))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.res is None:
        self.res = op3_online_walking_module_msgs.msg.PreviewResponse()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.res.K_row, _x.res.K_col,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.res.K = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.res.P_row, _x.res.P_col,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.res.P = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.res.K_row, _x.res.K_col))
      length = len(self.res.K)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.res.K.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.res.P_row, _x.res.P_col))
      length = len(self.res.P)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.res.P.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.res is None:
        self.res = op3_online_walking_module_msgs.msg.PreviewResponse()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.res.K_row, _x.res.K_col,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.res.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.res.P_row, _x.res.P_col,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.res.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
class GetPreviewMatrix(object):
  _type          = 'op3_online_walking_module_msgs/GetPreviewMatrix'
  _md5sum = '353f820108e54e41d7780433bc38ff53'
  _request_class  = GetPreviewMatrixRequest
  _response_class = GetPreviewMatrixResponse
