# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_camera_setting_tool/SetParametersRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import op3_camera_setting_tool.msg

class SetParametersRequest(genpy.Message):
  _md5sum = "4ae71cfda3f5edf19cfb9ef891d039e8"
  _type = "op3_camera_setting_tool/SetParametersRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """CameraParams  params

================================================================================
MSG: op3_camera_setting_tool/CameraParams
# This represents the parameters of usb camera

uint32  brightness 							# 0 - 255
uint32  contrast                            # 0 - 255
uint32  saturation                          # 0 - 255
uint32  sharpness                           # 0 - 255
uint32  gain                                # 0 - 255
bool    focus_auto                          #
int32  focus_absolute                       # -1 - 255
uint32  exposure_auto                       #
uint32  exposure_absolute                   # 0 - 255
bool    white_balance_temperature_auto      #
uint32  white_balance_temperature           # 4000 - 6500
"""
  __slots__ = ['params']
  _slot_types = ['op3_camera_setting_tool/CameraParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetParametersRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.params is None:
        self.params = op3_camera_setting_tool.msg.CameraParams()
    else:
      self.params = op3_camera_setting_tool.msg.CameraParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.params.brightness, _x.params.contrast, _x.params.saturation, _x.params.sharpness, _x.params.gain, _x.params.focus_auto, _x.params.focus_absolute, _x.params.exposure_auto, _x.params.exposure_absolute, _x.params.white_balance_temperature_auto, _x.params.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.params is None:
        self.params = op3_camera_setting_tool.msg.CameraParams()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.params.brightness, _x.params.contrast, _x.params.saturation, _x.params.sharpness, _x.params.gain, _x.params.focus_auto, _x.params.focus_absolute, _x.params.exposure_auto, _x.params.exposure_absolute, _x.params.white_balance_temperature_auto, _x.params.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.params.focus_auto = bool(self.params.focus_auto)
      self.params.white_balance_temperature_auto = bool(self.params.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.params.brightness, _x.params.contrast, _x.params.saturation, _x.params.sharpness, _x.params.gain, _x.params.focus_auto, _x.params.focus_absolute, _x.params.exposure_auto, _x.params.exposure_absolute, _x.params.white_balance_temperature_auto, _x.params.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.params is None:
        self.params = op3_camera_setting_tool.msg.CameraParams()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.params.brightness, _x.params.contrast, _x.params.saturation, _x.params.sharpness, _x.params.gain, _x.params.focus_auto, _x.params.focus_absolute, _x.params.exposure_auto, _x.params.exposure_absolute, _x.params.white_balance_temperature_auto, _x.params.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.params.focus_auto = bool(self.params.focus_auto)
      self.params.white_balance_temperature_auto = bool(self.params.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5IBi2IBI = None
def _get_struct_5IBi2IBI():
    global _struct_5IBi2IBI
    if _struct_5IBi2IBI is None:
        _struct_5IBi2IBI = struct.Struct("<5IBi2IBI")
    return _struct_5IBi2IBI
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_camera_setting_tool/SetParametersResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import op3_camera_setting_tool.msg

class SetParametersResponse(genpy.Message):
  _md5sum = "ba9411ea8e0a1eee4b9a16def5c761b3"
  _type = "op3_camera_setting_tool/SetParametersResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """CameraParams  returns


================================================================================
MSG: op3_camera_setting_tool/CameraParams
# This represents the parameters of usb camera

uint32  brightness 							# 0 - 255
uint32  contrast                            # 0 - 255
uint32  saturation                          # 0 - 255
uint32  sharpness                           # 0 - 255
uint32  gain                                # 0 - 255
bool    focus_auto                          #
int32  focus_absolute                       # -1 - 255
uint32  exposure_auto                       #
uint32  exposure_absolute                   # 0 - 255
bool    white_balance_temperature_auto      #
uint32  white_balance_temperature           # 4000 - 6500
"""
  __slots__ = ['returns']
  _slot_types = ['op3_camera_setting_tool/CameraParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       returns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetParametersResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.returns is None:
        self.returns = op3_camera_setting_tool.msg.CameraParams()
    else:
      self.returns = op3_camera_setting_tool.msg.CameraParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.returns.brightness, _x.returns.contrast, _x.returns.saturation, _x.returns.sharpness, _x.returns.gain, _x.returns.focus_auto, _x.returns.focus_absolute, _x.returns.exposure_auto, _x.returns.exposure_absolute, _x.returns.white_balance_temperature_auto, _x.returns.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.returns is None:
        self.returns = op3_camera_setting_tool.msg.CameraParams()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.returns.brightness, _x.returns.contrast, _x.returns.saturation, _x.returns.sharpness, _x.returns.gain, _x.returns.focus_auto, _x.returns.focus_absolute, _x.returns.exposure_auto, _x.returns.exposure_absolute, _x.returns.white_balance_temperature_auto, _x.returns.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.returns.focus_auto = bool(self.returns.focus_auto)
      self.returns.white_balance_temperature_auto = bool(self.returns.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.returns.brightness, _x.returns.contrast, _x.returns.saturation, _x.returns.sharpness, _x.returns.gain, _x.returns.focus_auto, _x.returns.focus_absolute, _x.returns.exposure_auto, _x.returns.exposure_absolute, _x.returns.white_balance_temperature_auto, _x.returns.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.returns is None:
        self.returns = op3_camera_setting_tool.msg.CameraParams()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.returns.brightness, _x.returns.contrast, _x.returns.saturation, _x.returns.sharpness, _x.returns.gain, _x.returns.focus_auto, _x.returns.focus_absolute, _x.returns.exposure_auto, _x.returns.exposure_absolute, _x.returns.white_balance_temperature_auto, _x.returns.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.returns.focus_auto = bool(self.returns.focus_auto)
      self.returns.white_balance_temperature_auto = bool(self.returns.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5IBi2IBI = None
def _get_struct_5IBi2IBI():
    global _struct_5IBi2IBI
    if _struct_5IBi2IBI is None:
        _struct_5IBi2IBI = struct.Struct("<5IBi2IBI")
    return _struct_5IBi2IBI
class SetParameters(object):
  _type          = 'op3_camera_setting_tool/SetParameters'
  _md5sum = 'f3fa160e05eef0ff6c5a3f1ecaa69cbc'
  _request_class  = SetParametersRequest
  _response_class = SetParametersResponse
