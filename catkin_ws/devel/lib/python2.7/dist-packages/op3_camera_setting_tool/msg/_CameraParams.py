# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_camera_setting_tool/CameraParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraParams(genpy.Message):
  _md5sum = "e3e69e8ca87d52d03119a1d00655d838"
  _type = "op3_camera_setting_tool/CameraParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This represents the parameters of usb camera

uint32  brightness 							# 0 - 255
uint32  contrast                            # 0 - 255
uint32  saturation                          # 0 - 255
uint32  sharpness                           # 0 - 255
uint32  gain                                # 0 - 255
bool    focus_auto                          #
int32  focus_absolute                       # -1 - 255
uint32  exposure_auto                       #
uint32  exposure_absolute                   # 0 - 255
bool    white_balance_temperature_auto      #
uint32  white_balance_temperature           # 4000 - 6500
"""
  __slots__ = ['brightness','contrast','saturation','sharpness','gain','focus_auto','focus_absolute','exposure_auto','exposure_absolute','white_balance_temperature_auto','white_balance_temperature']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','bool','int32','uint32','uint32','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       brightness,contrast,saturation,sharpness,gain,focus_auto,focus_absolute,exposure_auto,exposure_absolute,white_balance_temperature_auto,white_balance_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.brightness is None:
        self.brightness = 0
      if self.contrast is None:
        self.contrast = 0
      if self.saturation is None:
        self.saturation = 0
      if self.sharpness is None:
        self.sharpness = 0
      if self.gain is None:
        self.gain = 0
      if self.focus_auto is None:
        self.focus_auto = False
      if self.focus_absolute is None:
        self.focus_absolute = 0
      if self.exposure_auto is None:
        self.exposure_auto = 0
      if self.exposure_absolute is None:
        self.exposure_absolute = 0
      if self.white_balance_temperature_auto is None:
        self.white_balance_temperature_auto = False
      if self.white_balance_temperature is None:
        self.white_balance_temperature = 0
    else:
      self.brightness = 0
      self.contrast = 0
      self.saturation = 0
      self.sharpness = 0
      self.gain = 0
      self.focus_auto = False
      self.focus_absolute = 0
      self.exposure_auto = 0
      self.exposure_absolute = 0
      self.white_balance_temperature_auto = False
      self.white_balance_temperature = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.brightness, _x.contrast, _x.saturation, _x.sharpness, _x.gain, _x.focus_auto, _x.focus_absolute, _x.exposure_auto, _x.exposure_absolute, _x.white_balance_temperature_auto, _x.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.brightness, _x.contrast, _x.saturation, _x.sharpness, _x.gain, _x.focus_auto, _x.focus_absolute, _x.exposure_auto, _x.exposure_absolute, _x.white_balance_temperature_auto, _x.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.focus_auto = bool(self.focus_auto)
      self.white_balance_temperature_auto = bool(self.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5IBi2IBI().pack(_x.brightness, _x.contrast, _x.saturation, _x.sharpness, _x.gain, _x.focus_auto, _x.focus_absolute, _x.exposure_auto, _x.exposure_absolute, _x.white_balance_temperature_auto, _x.white_balance_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.brightness, _x.contrast, _x.saturation, _x.sharpness, _x.gain, _x.focus_auto, _x.focus_absolute, _x.exposure_auto, _x.exposure_absolute, _x.white_balance_temperature_auto, _x.white_balance_temperature,) = _get_struct_5IBi2IBI().unpack(str[start:end])
      self.focus_auto = bool(self.focus_auto)
      self.white_balance_temperature_auto = bool(self.white_balance_temperature_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5IBi2IBI = None
def _get_struct_5IBi2IBI():
    global _struct_5IBi2IBI
    if _struct_5IBi2IBI is None:
        _struct_5IBi2IBI = struct.Struct("<5IBi2IBI")
    return _struct_5IBi2IBI
