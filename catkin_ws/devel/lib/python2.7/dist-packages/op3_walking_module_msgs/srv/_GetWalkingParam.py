# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_walking_module_msgs/GetWalkingParamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetWalkingParamRequest(genpy.Message):
  _md5sum = "d964a0520d7b14bf821ec75afc464385"
  _type = "op3_walking_module_msgs/GetWalkingParamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool            get_param
"""
  __slots__ = ['get_param']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       get_param

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWalkingParamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.get_param is None:
        self.get_param = False
    else:
      self.get_param = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.get_param
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.get_param,) = _get_struct_B().unpack(str[start:end])
      self.get_param = bool(self.get_param)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.get_param
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.get_param,) = _get_struct_B().unpack(str[start:end])
      self.get_param = bool(self.get_param)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_walking_module_msgs/GetWalkingParamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import op3_walking_module_msgs.msg

class GetWalkingParamResponse(genpy.Message):
  _md5sum = "351c78d980e15976e0c1bcf480ef041c"
  _type = "op3_walking_module_msgs/GetWalkingParamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WalkingParam    parameters

================================================================================
MSG: op3_walking_module_msgs/WalkingParam
####### walking init pose #######
float32 init_x_offset
float32 init_y_offset
float32 init_z_offset
float32 init_roll_offset
float32 init_pitch_offset
float32 init_yaw_offset

####### time parameter #####
float32 period_time
float32 dsp_ratio
float32 step_fb_ratio

########## walking parameter ########
float32 x_move_amplitude
float32 y_move_amplitude
float32 z_move_amplitude
float32 angle_move_amplitude
bool move_aim_on

########## balance parameter ##########
bool balance_enable
float32 balance_hip_roll_gain
float32 balance_knee_gain
float32 balance_ankle_roll_gain
float32 balance_ankle_pitch_gain
float32 y_swap_amplitude
float32 z_swap_amplitude
float32 arm_swing_gain
float32 pelvis_offset
float32 hip_pitch_offset

########## gain parameter ##########
int32 p_gain
int32 i_gain
int32 d_gain"""
  __slots__ = ['parameters']
  _slot_types = ['op3_walking_module_msgs/WalkingParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       parameters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWalkingParamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.parameters is None:
        self.parameters = op3_walking_module_msgs.msg.WalkingParam()
    else:
      self.parameters = op3_walking_module_msgs.msg.WalkingParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13f2B9f3i().pack(_x.parameters.init_x_offset, _x.parameters.init_y_offset, _x.parameters.init_z_offset, _x.parameters.init_roll_offset, _x.parameters.init_pitch_offset, _x.parameters.init_yaw_offset, _x.parameters.period_time, _x.parameters.dsp_ratio, _x.parameters.step_fb_ratio, _x.parameters.x_move_amplitude, _x.parameters.y_move_amplitude, _x.parameters.z_move_amplitude, _x.parameters.angle_move_amplitude, _x.parameters.move_aim_on, _x.parameters.balance_enable, _x.parameters.balance_hip_roll_gain, _x.parameters.balance_knee_gain, _x.parameters.balance_ankle_roll_gain, _x.parameters.balance_ankle_pitch_gain, _x.parameters.y_swap_amplitude, _x.parameters.z_swap_amplitude, _x.parameters.arm_swing_gain, _x.parameters.pelvis_offset, _x.parameters.hip_pitch_offset, _x.parameters.p_gain, _x.parameters.i_gain, _x.parameters.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = op3_walking_module_msgs.msg.WalkingParam()
      end = 0
      _x = self
      start = end
      end += 102
      (_x.parameters.init_x_offset, _x.parameters.init_y_offset, _x.parameters.init_z_offset, _x.parameters.init_roll_offset, _x.parameters.init_pitch_offset, _x.parameters.init_yaw_offset, _x.parameters.period_time, _x.parameters.dsp_ratio, _x.parameters.step_fb_ratio, _x.parameters.x_move_amplitude, _x.parameters.y_move_amplitude, _x.parameters.z_move_amplitude, _x.parameters.angle_move_amplitude, _x.parameters.move_aim_on, _x.parameters.balance_enable, _x.parameters.balance_hip_roll_gain, _x.parameters.balance_knee_gain, _x.parameters.balance_ankle_roll_gain, _x.parameters.balance_ankle_pitch_gain, _x.parameters.y_swap_amplitude, _x.parameters.z_swap_amplitude, _x.parameters.arm_swing_gain, _x.parameters.pelvis_offset, _x.parameters.hip_pitch_offset, _x.parameters.p_gain, _x.parameters.i_gain, _x.parameters.d_gain,) = _get_struct_13f2B9f3i().unpack(str[start:end])
      self.parameters.move_aim_on = bool(self.parameters.move_aim_on)
      self.parameters.balance_enable = bool(self.parameters.balance_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13f2B9f3i().pack(_x.parameters.init_x_offset, _x.parameters.init_y_offset, _x.parameters.init_z_offset, _x.parameters.init_roll_offset, _x.parameters.init_pitch_offset, _x.parameters.init_yaw_offset, _x.parameters.period_time, _x.parameters.dsp_ratio, _x.parameters.step_fb_ratio, _x.parameters.x_move_amplitude, _x.parameters.y_move_amplitude, _x.parameters.z_move_amplitude, _x.parameters.angle_move_amplitude, _x.parameters.move_aim_on, _x.parameters.balance_enable, _x.parameters.balance_hip_roll_gain, _x.parameters.balance_knee_gain, _x.parameters.balance_ankle_roll_gain, _x.parameters.balance_ankle_pitch_gain, _x.parameters.y_swap_amplitude, _x.parameters.z_swap_amplitude, _x.parameters.arm_swing_gain, _x.parameters.pelvis_offset, _x.parameters.hip_pitch_offset, _x.parameters.p_gain, _x.parameters.i_gain, _x.parameters.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = op3_walking_module_msgs.msg.WalkingParam()
      end = 0
      _x = self
      start = end
      end += 102
      (_x.parameters.init_x_offset, _x.parameters.init_y_offset, _x.parameters.init_z_offset, _x.parameters.init_roll_offset, _x.parameters.init_pitch_offset, _x.parameters.init_yaw_offset, _x.parameters.period_time, _x.parameters.dsp_ratio, _x.parameters.step_fb_ratio, _x.parameters.x_move_amplitude, _x.parameters.y_move_amplitude, _x.parameters.z_move_amplitude, _x.parameters.angle_move_amplitude, _x.parameters.move_aim_on, _x.parameters.balance_enable, _x.parameters.balance_hip_roll_gain, _x.parameters.balance_knee_gain, _x.parameters.balance_ankle_roll_gain, _x.parameters.balance_ankle_pitch_gain, _x.parameters.y_swap_amplitude, _x.parameters.z_swap_amplitude, _x.parameters.arm_swing_gain, _x.parameters.pelvis_offset, _x.parameters.hip_pitch_offset, _x.parameters.p_gain, _x.parameters.i_gain, _x.parameters.d_gain,) = _get_struct_13f2B9f3i().unpack(str[start:end])
      self.parameters.move_aim_on = bool(self.parameters.move_aim_on)
      self.parameters.balance_enable = bool(self.parameters.balance_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f2B9f3i = None
def _get_struct_13f2B9f3i():
    global _struct_13f2B9f3i
    if _struct_13f2B9f3i is None:
        _struct_13f2B9f3i = struct.Struct("<13f2B9f3i")
    return _struct_13f2B9f3i
class GetWalkingParam(object):
  _type          = 'op3_walking_module_msgs/GetWalkingParam'
  _md5sum = 'fa49c3d94c3b9543346b4158f6b0a3fd'
  _request_class  = GetWalkingParamRequest
  _response_class = GetWalkingParamResponse
