# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_walking_module_msgs/WalkingParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WalkingParam(genpy.Message):
  _md5sum = "f136f28fe424a614afd1c68b67d3a9e8"
  _type = "op3_walking_module_msgs/WalkingParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####### walking init pose #######
float32 init_x_offset
float32 init_y_offset
float32 init_z_offset
float32 init_roll_offset
float32 init_pitch_offset
float32 init_yaw_offset

####### time parameter #####
float32 period_time
float32 dsp_ratio
float32 step_fb_ratio

########## walking parameter ########
float32 x_move_amplitude
float32 y_move_amplitude
float32 z_move_amplitude
float32 angle_move_amplitude
bool move_aim_on

########## balance parameter ##########
bool balance_enable
float32 balance_hip_roll_gain
float32 balance_knee_gain
float32 balance_ankle_roll_gain
float32 balance_ankle_pitch_gain
float32 y_swap_amplitude
float32 z_swap_amplitude
float32 arm_swing_gain
float32 pelvis_offset
float32 hip_pitch_offset

########## gain parameter ##########
int32 p_gain
int32 i_gain
int32 d_gain"""
  __slots__ = ['init_x_offset','init_y_offset','init_z_offset','init_roll_offset','init_pitch_offset','init_yaw_offset','period_time','dsp_ratio','step_fb_ratio','x_move_amplitude','y_move_amplitude','z_move_amplitude','angle_move_amplitude','move_aim_on','balance_enable','balance_hip_roll_gain','balance_knee_gain','balance_ankle_roll_gain','balance_ankle_pitch_gain','y_swap_amplitude','z_swap_amplitude','arm_swing_gain','pelvis_offset','hip_pitch_offset','p_gain','i_gain','d_gain']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       init_x_offset,init_y_offset,init_z_offset,init_roll_offset,init_pitch_offset,init_yaw_offset,period_time,dsp_ratio,step_fb_ratio,x_move_amplitude,y_move_amplitude,z_move_amplitude,angle_move_amplitude,move_aim_on,balance_enable,balance_hip_roll_gain,balance_knee_gain,balance_ankle_roll_gain,balance_ankle_pitch_gain,y_swap_amplitude,z_swap_amplitude,arm_swing_gain,pelvis_offset,hip_pitch_offset,p_gain,i_gain,d_gain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkingParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.init_x_offset is None:
        self.init_x_offset = 0.
      if self.init_y_offset is None:
        self.init_y_offset = 0.
      if self.init_z_offset is None:
        self.init_z_offset = 0.
      if self.init_roll_offset is None:
        self.init_roll_offset = 0.
      if self.init_pitch_offset is None:
        self.init_pitch_offset = 0.
      if self.init_yaw_offset is None:
        self.init_yaw_offset = 0.
      if self.period_time is None:
        self.period_time = 0.
      if self.dsp_ratio is None:
        self.dsp_ratio = 0.
      if self.step_fb_ratio is None:
        self.step_fb_ratio = 0.
      if self.x_move_amplitude is None:
        self.x_move_amplitude = 0.
      if self.y_move_amplitude is None:
        self.y_move_amplitude = 0.
      if self.z_move_amplitude is None:
        self.z_move_amplitude = 0.
      if self.angle_move_amplitude is None:
        self.angle_move_amplitude = 0.
      if self.move_aim_on is None:
        self.move_aim_on = False
      if self.balance_enable is None:
        self.balance_enable = False
      if self.balance_hip_roll_gain is None:
        self.balance_hip_roll_gain = 0.
      if self.balance_knee_gain is None:
        self.balance_knee_gain = 0.
      if self.balance_ankle_roll_gain is None:
        self.balance_ankle_roll_gain = 0.
      if self.balance_ankle_pitch_gain is None:
        self.balance_ankle_pitch_gain = 0.
      if self.y_swap_amplitude is None:
        self.y_swap_amplitude = 0.
      if self.z_swap_amplitude is None:
        self.z_swap_amplitude = 0.
      if self.arm_swing_gain is None:
        self.arm_swing_gain = 0.
      if self.pelvis_offset is None:
        self.pelvis_offset = 0.
      if self.hip_pitch_offset is None:
        self.hip_pitch_offset = 0.
      if self.p_gain is None:
        self.p_gain = 0
      if self.i_gain is None:
        self.i_gain = 0
      if self.d_gain is None:
        self.d_gain = 0
    else:
      self.init_x_offset = 0.
      self.init_y_offset = 0.
      self.init_z_offset = 0.
      self.init_roll_offset = 0.
      self.init_pitch_offset = 0.
      self.init_yaw_offset = 0.
      self.period_time = 0.
      self.dsp_ratio = 0.
      self.step_fb_ratio = 0.
      self.x_move_amplitude = 0.
      self.y_move_amplitude = 0.
      self.z_move_amplitude = 0.
      self.angle_move_amplitude = 0.
      self.move_aim_on = False
      self.balance_enable = False
      self.balance_hip_roll_gain = 0.
      self.balance_knee_gain = 0.
      self.balance_ankle_roll_gain = 0.
      self.balance_ankle_pitch_gain = 0.
      self.y_swap_amplitude = 0.
      self.z_swap_amplitude = 0.
      self.arm_swing_gain = 0.
      self.pelvis_offset = 0.
      self.hip_pitch_offset = 0.
      self.p_gain = 0
      self.i_gain = 0
      self.d_gain = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13f2B9f3i().pack(_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.p_gain, _x.i_gain, _x.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 102
      (_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.p_gain, _x.i_gain, _x.d_gain,) = _get_struct_13f2B9f3i().unpack(str[start:end])
      self.move_aim_on = bool(self.move_aim_on)
      self.balance_enable = bool(self.balance_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13f2B9f3i().pack(_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.p_gain, _x.i_gain, _x.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 102
      (_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.p_gain, _x.i_gain, _x.d_gain,) = _get_struct_13f2B9f3i().unpack(str[start:end])
      self.move_aim_on = bool(self.move_aim_on)
      self.balance_enable = bool(self.balance_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f2B9f3i = None
def _get_struct_13f2B9f3i():
    global _struct_13f2B9f3i
    if _struct_13f2B9f3i is None:
        _struct_13f2B9f3i = struct.Struct("<13f2B9f3i")
    return _struct_13f2B9f3i
