// Generated by gencpp from file op3_online_walking_module_msgs/WalkingParam.msg
// DO NOT EDIT!


#ifndef OP3_ONLINE_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
#define OP3_ONLINE_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_online_walking_module_msgs
{
template <class ContainerAllocator>
struct WalkingParam_
{
  typedef WalkingParam_<ContainerAllocator> Type;

  WalkingParam_()
    : dsp_ratio(0.0)
    , lipm_height(0.0)
    , foot_height_max(0.0)
    , zmp_offset_x(0.0)
    , zmp_offset_y(0.0)  {
    }
  WalkingParam_(const ContainerAllocator& _alloc)
    : dsp_ratio(0.0)
    , lipm_height(0.0)
    , foot_height_max(0.0)
    , zmp_offset_x(0.0)
    , zmp_offset_y(0.0)  {
  (void)_alloc;
    }



   typedef double _dsp_ratio_type;
  _dsp_ratio_type dsp_ratio;

   typedef double _lipm_height_type;
  _lipm_height_type lipm_height;

   typedef double _foot_height_max_type;
  _foot_height_max_type foot_height_max;

   typedef double _zmp_offset_x_type;
  _zmp_offset_x_type zmp_offset_x;

   typedef double _zmp_offset_y_type;
  _zmp_offset_y_type zmp_offset_y;





  typedef boost::shared_ptr< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingParam_

typedef ::op3_online_walking_module_msgs::WalkingParam_<std::allocator<void> > WalkingParam;

typedef boost::shared_ptr< ::op3_online_walking_module_msgs::WalkingParam > WalkingParamPtr;
typedef boost::shared_ptr< ::op3_online_walking_module_msgs::WalkingParam const> WalkingParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace op3_online_walking_module_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'op3_online_walking_module_msgs': ['/home/benjamin/ROCO318/catkin_ws/src/ROBOTIS-OP3-msgs/op3_online_walking_module_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2197a6ee210540728363ab6b547935bd";
  }

  static const char* value(const ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2197a6ee21054072ULL;
  static const uint64_t static_value2 = 0x8363ab6b547935bdULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_online_walking_module_msgs/WalkingParam";
  }

  static const char* value(const ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dsp_ratio\n\
float64 lipm_height\n\
float64 foot_height_max\n\
float64 zmp_offset_x\n\
float64 zmp_offset_y\n\
";
  }

  static const char* value(const ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dsp_ratio);
      stream.next(m.lipm_height);
      stream.next(m.foot_height_max);
      stream.next(m.zmp_offset_x);
      stream.next(m.zmp_offset_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_online_walking_module_msgs::WalkingParam_<ContainerAllocator>& v)
  {
    s << indent << "dsp_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.dsp_ratio);
    s << indent << "lipm_height: ";
    Printer<double>::stream(s, indent + "  ", v.lipm_height);
    s << indent << "foot_height_max: ";
    Printer<double>::stream(s, indent + "  ", v.foot_height_max);
    s << indent << "zmp_offset_x: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_offset_x);
    s << indent << "zmp_offset_y: ";
    Printer<double>::stream(s, indent + "  ", v.zmp_offset_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_ONLINE_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
