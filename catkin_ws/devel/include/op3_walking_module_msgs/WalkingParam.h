// Generated by gencpp from file op3_walking_module_msgs/WalkingParam.msg
// DO NOT EDIT!


#ifndef OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
#define OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_walking_module_msgs
{
template <class ContainerAllocator>
struct WalkingParam_
{
  typedef WalkingParam_<ContainerAllocator> Type;

  WalkingParam_()
    : init_x_offset(0.0)
    , init_y_offset(0.0)
    , init_z_offset(0.0)
    , init_roll_offset(0.0)
    , init_pitch_offset(0.0)
    , init_yaw_offset(0.0)
    , period_time(0.0)
    , dsp_ratio(0.0)
    , step_fb_ratio(0.0)
    , x_move_amplitude(0.0)
    , y_move_amplitude(0.0)
    , z_move_amplitude(0.0)
    , angle_move_amplitude(0.0)
    , move_aim_on(false)
    , balance_enable(false)
    , balance_hip_roll_gain(0.0)
    , balance_knee_gain(0.0)
    , balance_ankle_roll_gain(0.0)
    , balance_ankle_pitch_gain(0.0)
    , y_swap_amplitude(0.0)
    , z_swap_amplitude(0.0)
    , arm_swing_gain(0.0)
    , pelvis_offset(0.0)
    , hip_pitch_offset(0.0)
    , p_gain(0)
    , i_gain(0)
    , d_gain(0)  {
    }
  WalkingParam_(const ContainerAllocator& _alloc)
    : init_x_offset(0.0)
    , init_y_offset(0.0)
    , init_z_offset(0.0)
    , init_roll_offset(0.0)
    , init_pitch_offset(0.0)
    , init_yaw_offset(0.0)
    , period_time(0.0)
    , dsp_ratio(0.0)
    , step_fb_ratio(0.0)
    , x_move_amplitude(0.0)
    , y_move_amplitude(0.0)
    , z_move_amplitude(0.0)
    , angle_move_amplitude(0.0)
    , move_aim_on(false)
    , balance_enable(false)
    , balance_hip_roll_gain(0.0)
    , balance_knee_gain(0.0)
    , balance_ankle_roll_gain(0.0)
    , balance_ankle_pitch_gain(0.0)
    , y_swap_amplitude(0.0)
    , z_swap_amplitude(0.0)
    , arm_swing_gain(0.0)
    , pelvis_offset(0.0)
    , hip_pitch_offset(0.0)
    , p_gain(0)
    , i_gain(0)
    , d_gain(0)  {
  (void)_alloc;
    }



   typedef float _init_x_offset_type;
  _init_x_offset_type init_x_offset;

   typedef float _init_y_offset_type;
  _init_y_offset_type init_y_offset;

   typedef float _init_z_offset_type;
  _init_z_offset_type init_z_offset;

   typedef float _init_roll_offset_type;
  _init_roll_offset_type init_roll_offset;

   typedef float _init_pitch_offset_type;
  _init_pitch_offset_type init_pitch_offset;

   typedef float _init_yaw_offset_type;
  _init_yaw_offset_type init_yaw_offset;

   typedef float _period_time_type;
  _period_time_type period_time;

   typedef float _dsp_ratio_type;
  _dsp_ratio_type dsp_ratio;

   typedef float _step_fb_ratio_type;
  _step_fb_ratio_type step_fb_ratio;

   typedef float _x_move_amplitude_type;
  _x_move_amplitude_type x_move_amplitude;

   typedef float _y_move_amplitude_type;
  _y_move_amplitude_type y_move_amplitude;

   typedef float _z_move_amplitude_type;
  _z_move_amplitude_type z_move_amplitude;

   typedef float _angle_move_amplitude_type;
  _angle_move_amplitude_type angle_move_amplitude;

   typedef uint8_t _move_aim_on_type;
  _move_aim_on_type move_aim_on;

   typedef uint8_t _balance_enable_type;
  _balance_enable_type balance_enable;

   typedef float _balance_hip_roll_gain_type;
  _balance_hip_roll_gain_type balance_hip_roll_gain;

   typedef float _balance_knee_gain_type;
  _balance_knee_gain_type balance_knee_gain;

   typedef float _balance_ankle_roll_gain_type;
  _balance_ankle_roll_gain_type balance_ankle_roll_gain;

   typedef float _balance_ankle_pitch_gain_type;
  _balance_ankle_pitch_gain_type balance_ankle_pitch_gain;

   typedef float _y_swap_amplitude_type;
  _y_swap_amplitude_type y_swap_amplitude;

   typedef float _z_swap_amplitude_type;
  _z_swap_amplitude_type z_swap_amplitude;

   typedef float _arm_swing_gain_type;
  _arm_swing_gain_type arm_swing_gain;

   typedef float _pelvis_offset_type;
  _pelvis_offset_type pelvis_offset;

   typedef float _hip_pitch_offset_type;
  _hip_pitch_offset_type hip_pitch_offset;

   typedef int32_t _p_gain_type;
  _p_gain_type p_gain;

   typedef int32_t _i_gain_type;
  _i_gain_type i_gain;

   typedef int32_t _d_gain_type;
  _d_gain_type d_gain;





  typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingParam_

typedef ::op3_walking_module_msgs::WalkingParam_<std::allocator<void> > WalkingParam;

typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam > WalkingParamPtr;
typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam const> WalkingParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace op3_walking_module_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'op3_walking_module_msgs': ['/home/benjamin/ROCO318/catkin_ws/src/ROBOTIS-OP3-msgs/op3_walking_module_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f136f28fe424a614afd1c68b67d3a9e8";
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf136f28fe424a614ULL;
  static const uint64_t static_value2 = 0xafd1c68b67d3a9e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_walking_module_msgs/WalkingParam";
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####### walking init pose #######\n\
float32 init_x_offset\n\
float32 init_y_offset\n\
float32 init_z_offset\n\
float32 init_roll_offset\n\
float32 init_pitch_offset\n\
float32 init_yaw_offset\n\
\n\
####### time parameter #####\n\
float32 period_time\n\
float32 dsp_ratio\n\
float32 step_fb_ratio\n\
\n\
########## walking parameter ########\n\
float32 x_move_amplitude\n\
float32 y_move_amplitude\n\
float32 z_move_amplitude\n\
float32 angle_move_amplitude\n\
bool move_aim_on\n\
\n\
########## balance parameter ##########\n\
bool balance_enable\n\
float32 balance_hip_roll_gain\n\
float32 balance_knee_gain\n\
float32 balance_ankle_roll_gain\n\
float32 balance_ankle_pitch_gain\n\
float32 y_swap_amplitude\n\
float32 z_swap_amplitude\n\
float32 arm_swing_gain\n\
float32 pelvis_offset\n\
float32 hip_pitch_offset\n\
\n\
########## gain parameter ##########\n\
int32 p_gain\n\
int32 i_gain\n\
int32 d_gain\n\
";
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init_x_offset);
      stream.next(m.init_y_offset);
      stream.next(m.init_z_offset);
      stream.next(m.init_roll_offset);
      stream.next(m.init_pitch_offset);
      stream.next(m.init_yaw_offset);
      stream.next(m.period_time);
      stream.next(m.dsp_ratio);
      stream.next(m.step_fb_ratio);
      stream.next(m.x_move_amplitude);
      stream.next(m.y_move_amplitude);
      stream.next(m.z_move_amplitude);
      stream.next(m.angle_move_amplitude);
      stream.next(m.move_aim_on);
      stream.next(m.balance_enable);
      stream.next(m.balance_hip_roll_gain);
      stream.next(m.balance_knee_gain);
      stream.next(m.balance_ankle_roll_gain);
      stream.next(m.balance_ankle_pitch_gain);
      stream.next(m.y_swap_amplitude);
      stream.next(m.z_swap_amplitude);
      stream.next(m.arm_swing_gain);
      stream.next(m.pelvis_offset);
      stream.next(m.hip_pitch_offset);
      stream.next(m.p_gain);
      stream.next(m.i_gain);
      stream.next(m.d_gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>& v)
  {
    s << indent << "init_x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_x_offset);
    s << indent << "init_y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_y_offset);
    s << indent << "init_z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_z_offset);
    s << indent << "init_roll_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_roll_offset);
    s << indent << "init_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_pitch_offset);
    s << indent << "init_yaw_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_yaw_offset);
    s << indent << "period_time: ";
    Printer<float>::stream(s, indent + "  ", v.period_time);
    s << indent << "dsp_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.dsp_ratio);
    s << indent << "step_fb_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.step_fb_ratio);
    s << indent << "x_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.x_move_amplitude);
    s << indent << "y_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.y_move_amplitude);
    s << indent << "z_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.z_move_amplitude);
    s << indent << "angle_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.angle_move_amplitude);
    s << indent << "move_aim_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_aim_on);
    s << indent << "balance_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.balance_enable);
    s << indent << "balance_hip_roll_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_hip_roll_gain);
    s << indent << "balance_knee_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_knee_gain);
    s << indent << "balance_ankle_roll_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_ankle_roll_gain);
    s << indent << "balance_ankle_pitch_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_ankle_pitch_gain);
    s << indent << "y_swap_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.y_swap_amplitude);
    s << indent << "z_swap_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.z_swap_amplitude);
    s << indent << "arm_swing_gain: ";
    Printer<float>::stream(s, indent + "  ", v.arm_swing_gain);
    s << indent << "pelvis_offset: ";
    Printer<float>::stream(s, indent + "  ", v.pelvis_offset);
    s << indent << "hip_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.hip_pitch_offset);
    s << indent << "p_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.p_gain);
    s << indent << "i_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i_gain);
    s << indent << "d_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.d_gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
