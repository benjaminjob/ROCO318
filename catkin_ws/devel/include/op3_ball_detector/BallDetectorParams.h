// Generated by gencpp from file op3_ball_detector/BallDetectorParams.msg
// DO NOT EDIT!


#ifndef OP3_BALL_DETECTOR_MESSAGE_BALLDETECTORPARAMS_H
#define OP3_BALL_DETECTOR_MESSAGE_BALLDETECTORPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_ball_detector
{
template <class ContainerAllocator>
struct BallDetectorParams_
{
  typedef BallDetectorParams_<ContainerAllocator> Type;

  BallDetectorParams_()
    : gaussian_blur_size(0)
    , gaussian_blur_sigma(0.0)
    , canny_edge_th(0.0)
    , hough_accum_resolution(0.0)
    , hough_accum_th(0.0)
    , min_circle_dist(0.0)
    , min_radius(0)
    , max_radius(0)
    , filter_h_min(0)
    , filter_h_max(0)
    , filter_s_min(0)
    , filter_s_max(0)
    , filter_v_min(0)
    , filter_v_max(0)
    , ellipse_size(0)  {
    }
  BallDetectorParams_(const ContainerAllocator& _alloc)
    : gaussian_blur_size(0)
    , gaussian_blur_sigma(0.0)
    , canny_edge_th(0.0)
    , hough_accum_resolution(0.0)
    , hough_accum_th(0.0)
    , min_circle_dist(0.0)
    , min_radius(0)
    , max_radius(0)
    , filter_h_min(0)
    , filter_h_max(0)
    , filter_s_min(0)
    , filter_s_max(0)
    , filter_v_min(0)
    , filter_v_max(0)
    , ellipse_size(0)  {
  (void)_alloc;
    }



   typedef uint32_t _gaussian_blur_size_type;
  _gaussian_blur_size_type gaussian_blur_size;

   typedef float _gaussian_blur_sigma_type;
  _gaussian_blur_sigma_type gaussian_blur_sigma;

   typedef float _canny_edge_th_type;
  _canny_edge_th_type canny_edge_th;

   typedef float _hough_accum_resolution_type;
  _hough_accum_resolution_type hough_accum_resolution;

   typedef float _hough_accum_th_type;
  _hough_accum_th_type hough_accum_th;

   typedef float _min_circle_dist_type;
  _min_circle_dist_type min_circle_dist;

   typedef uint32_t _min_radius_type;
  _min_radius_type min_radius;

   typedef uint32_t _max_radius_type;
  _max_radius_type max_radius;

   typedef uint32_t _filter_h_min_type;
  _filter_h_min_type filter_h_min;

   typedef uint32_t _filter_h_max_type;
  _filter_h_max_type filter_h_max;

   typedef uint32_t _filter_s_min_type;
  _filter_s_min_type filter_s_min;

   typedef uint32_t _filter_s_max_type;
  _filter_s_max_type filter_s_max;

   typedef uint32_t _filter_v_min_type;
  _filter_v_min_type filter_v_min;

   typedef uint32_t _filter_v_max_type;
  _filter_v_max_type filter_v_max;

   typedef uint32_t _ellipse_size_type;
  _ellipse_size_type ellipse_size;





  typedef boost::shared_ptr< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> const> ConstPtr;

}; // struct BallDetectorParams_

typedef ::op3_ball_detector::BallDetectorParams_<std::allocator<void> > BallDetectorParams;

typedef boost::shared_ptr< ::op3_ball_detector::BallDetectorParams > BallDetectorParamsPtr;
typedef boost::shared_ptr< ::op3_ball_detector::BallDetectorParams const> BallDetectorParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace op3_ball_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'op3_ball_detector': ['/home/benjamin/ROCO318/catkin_ws/src/ROBOTIS-OP3-Demo/op3_ball_detector/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23a4c471d4f161f32a80066aac78a96c";
  }

  static const char* value(const ::op3_ball_detector::BallDetectorParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23a4c471d4f161f3ULL;
  static const uint64_t static_value2 = 0x2a80066aac78a96cULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_ball_detector/BallDetectorParams";
  }

  static const char* value(const ::op3_ball_detector::BallDetectorParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents the parameters of ball_detector\n\
\n\
uint32  gaussian_blur_size      # only odd number, 1 - 11\n\
float32 gaussian_blur_sigma     # 1 - 5\n\
float32 canny_edge_th           # 50 - 200\n\
float32 hough_accum_resolution  # 1 - 8\n\
float32 hough_accum_th          # 10 - 200\n\
float32 min_circle_dist         # 10 - 200\n\
uint32  min_radius              # 10 - 200\n\
uint32  max_radius              # 100 - 600\n\
uint32  filter_h_min            # 0 - 359\n\
uint32  filter_h_max\n\
uint32  filter_s_min            # 0 - 255\n\
uint32  filter_s_max\n\
uint32  filter_v_min            # 0 - 255\n\
uint32  filter_v_max\n\
uint32  ellipse_size            # 1 - 9\n\
";
  }

  static const char* value(const ::op3_ball_detector::BallDetectorParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gaussian_blur_size);
      stream.next(m.gaussian_blur_sigma);
      stream.next(m.canny_edge_th);
      stream.next(m.hough_accum_resolution);
      stream.next(m.hough_accum_th);
      stream.next(m.min_circle_dist);
      stream.next(m.min_radius);
      stream.next(m.max_radius);
      stream.next(m.filter_h_min);
      stream.next(m.filter_h_max);
      stream.next(m.filter_s_min);
      stream.next(m.filter_s_max);
      stream.next(m.filter_v_min);
      stream.next(m.filter_v_max);
      stream.next(m.ellipse_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BallDetectorParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_ball_detector::BallDetectorParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_ball_detector::BallDetectorParams_<ContainerAllocator>& v)
  {
    s << indent << "gaussian_blur_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gaussian_blur_size);
    s << indent << "gaussian_blur_sigma: ";
    Printer<float>::stream(s, indent + "  ", v.gaussian_blur_sigma);
    s << indent << "canny_edge_th: ";
    Printer<float>::stream(s, indent + "  ", v.canny_edge_th);
    s << indent << "hough_accum_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.hough_accum_resolution);
    s << indent << "hough_accum_th: ";
    Printer<float>::stream(s, indent + "  ", v.hough_accum_th);
    s << indent << "min_circle_dist: ";
    Printer<float>::stream(s, indent + "  ", v.min_circle_dist);
    s << indent << "min_radius: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.min_radius);
    s << indent << "max_radius: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_radius);
    s << indent << "filter_h_min: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_h_min);
    s << indent << "filter_h_max: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_h_max);
    s << indent << "filter_s_min: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_s_min);
    s << indent << "filter_s_max: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_s_max);
    s << indent << "filter_v_min: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_v_min);
    s << indent << "filter_v_max: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filter_v_max);
    s << indent << "ellipse_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ellipse_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_BALL_DETECTOR_MESSAGE_BALLDETECTORPARAMS_H
